use std::io::prelude::*;
use std::fs::File;
use std::path::{Path, PathBuf};
use std::collections::HashMap;

use core::engine_support_systems::system_management::system_types::{VSystem, SystemType};
use core::engine_support_systems::system_management::loggers::VLog;
use core::engine_support_systems::error_handling::error::{GameResult, GameError};

//The logger create 2 files on start_up() : the general log file, and the logger dedicated log file.
//The logger check that the filesystem structure has been generated by the Workspace subsystem.
#[derive(Debug)]
pub struct Logger {
    paths: HashMap<SystemType, PathBuf>,
    files: HashMap<SystemType, File>,
}

impl Logger {
    pub fn new(paths: HashMap<SystemType, PathBuf>) -> Self {
        Logger {
            paths,
            files: HashMap::new(),
        }
    }

    pub fn add_path(&mut self, system_type: SystemType, the_path: &Path) {
        self.paths.insert(system_type, the_path.to_path_buf());
    }
}

impl Default for Logger {
    fn default() -> Logger {
        Logger {
            paths: HashMap::new(),
            files: HashMap::new(),
        }
    }
}

impl VSystem for Logger {
    fn start_up(&mut self) -> GameResult<()> {
        for (key, value) in self.paths.iter_mut() {
            if !value.as_path().exists() {
                GameError::LogError(format!("Could not create the '{}' at path '{:?}'. Some directories don't exist in the workspace !", *key, value), None);
            } else {
                match key {
                    &SystemType::Physic => {
                        value.push("physic.log");
                        match File::create(value.as_path()) {
                            Ok(file) => {
                                match self.files.insert(*key, file) {
                                    None => {
                                        self.write_to_dedicated_log(*key, format!("'{}' log created", *key).as_str());
                                    },
                                    Some(file) => {
                                        GameError::LogError(format!("A '{}' log was already registered in the logger system !", *key), None);
                                    },
                                }
                            },
                            Err(e) => {
                                GameError::LogError(format!("Could not create the '{}' log !", *key), Some(e));
                            },
                        }
                    },
                    &SystemType::Log => {
                        value.push("logger.log");
                        match File::create(value.as_path()) {
                            Ok(file) => {
                                match self.files.insert(*key, file) {
                                    None => {
                                        self.write_to_dedicated_log(*key, format!("'{}' log created", *key).as_str());
                                    },
                                    Some(file) => {
                                        GameError::LogError(format!("A '{}' log was already registered in the logger system !", *key), None);
                                    },
                                }
                            },
                            Err(e) => {
                                GameError::LogError(format!("Could not create the '{}' log !", *key), Some(e));
                            },
                        }
                    },
                    &SystemType::Audio => {
                        value.push("audio.log");
                        match File::create(value.as_path()) {
                            Ok(file) => {
                                match self.files.insert(*key, file) {
                                    None => {
                                        self.write_to_dedicated_log(*key, format!("'{}' log created", *key).as_str());
                                    },
                                    Some(file) => {
                                        GameError::LogError(format!("A '{}' log was already registered in the logger system !", *key), None);
                                    },
                                }
                            },
                            Err(e) => {
                                GameError::LogError(format!("Could not create the '{}' log !", *key), Some(e));
                            },
                        }
                    },
                    &SystemType::Rendering => {
                        value.push("rendering.log");
                        match File::create(value.as_path()) {
                            Ok(file) => {
                                match self.files.insert(*key, file) {
                                    None => {
                                        self.write_to_dedicated_log(*key, format!("'{}' log created", *key).as_str());
                                    },
                                    Some(file) => {
                                        GameError::LogError(format!("A '{}' log was already registered in the logger system !", *key), None);
                                    },
                                }
                            },
                            Err(e) => {
                                GameError::LogError(format!("Could not create the '{}' log !", *key), Some(e));
                            },
                        }
                    },
                    &SystemType::Resource => {
                        value.push("resource.log");
                        match File::create(value.as_path()) {
                            Ok(file) => {
                                match self.files.insert(*key, file) {
                                    None => {
                                        self.write_to_dedicated_log(*key, format!("'{}' log created", *key).as_str());
                                    },
                                    Some(file) => {
                                        GameError::LogError(format!("A '{}' log was already registered in the logger system !", *key), None);
                                    },
                                }
                            },
                            Err(e) => {
                                GameError::LogError(format!("Could not create the '{}' log !", *key), Some(e));
                            },
                        }
                    },
                    &SystemType::Input => {
                        value.push("input.log");
                        match File::create(value.as_path()) {
                            Ok(file) => {
                                match self.files.insert(*key, file) {
                                    None => {
                                        self.write_to_dedicated_log(*key, format!("'{}' log created", *key).as_str());
                                    },
                                    Some(file) => {
                                        GameError::LogError(format!("A '{}' log was already registered in the logger system !", *key), None);
                                    },
                                }
                            },
                            Err(e) => {
                                GameError::LogError(format!("Could not create the '{}' log !", *key), Some(e));
                            },
                        }
                    },
                }
            }

        }

        self.write_to_dedicated_log(SystemType::Log, format!("Log system fully initialized !").as_str());
        Ok(())
    }

    fn shut_down(&mut self) -> GameResult<()> {

    }

    fn system_type() -> SystemType {
        SystemType::Log
    }
}

impl VLog for Logger {
    fn write_to_dedicated_log(&mut self, system_type: SystemType, message: &str) -> GameResult<()> {
        match system_type {
            SystemType::Physic => {
                match self.files.get_mut(&SystemType::Physic) {
                    Some(file) => match file.write_all(message.as_bytes()) {
                        Ok(()) => Ok(()),
                        Err(e) => Err(GameError::LogError(format!("Error while writing in the '{}' log !", system_type),Some(e))),
                    },
                    None => Err(GameError::LogError(format!("The '{}' log could not be found !", system_type), None)),
                }
            },
            SystemType::Input => {
                match self.files.get_mut(&SystemType::Input) {
                    Some(file) => match file.write_all(message.as_bytes()) {
                        Ok(()) => Ok(()),
                        Err(e) => Err(GameError::LogError(format!("Error while writing in the '{}' log !", system_type), Some(e))),
                    },
                    None => Err(GameError::LogError(format!("The '{}' log could not be found !", system_type), None)),
                }
            },
            SystemType::Resource => {
                match self.files.get_mut(&SystemType::Resource) {
                    Some(file) => match file.write_all(message.as_bytes()) {
                        Ok(()) => Ok(()),
                        Err(e) => Err(GameError::LogError(format!("Error while writing in the '{}' log !", system_type), Some(e))),
                    },
                    None => Err(GameError::LogError(format!("The '{}' log could not be found !", system_type), None)),
                }
            },
            SystemType::Rendering => {
                match self.files.get_mut(&SystemType::Rendering) {
                    Some(file) => match file.write_all(message.as_bytes()) {
                        Ok(()) => Ok(()),
                        Err(e) => Err(GameError::LogError(format!("Error while writing in the '{}' log !", system_type), Some(e))),
                    },
                    None => Err(GameError::LogError(format!("The '{}' log could not be found !", system_type), None)),
                }
            },
            SystemType::Log => {
                match self.files.get_mut(&SystemType::Log) {
                    Some(file) => match file.write_all(message.as_bytes()) {
                        Ok(()) => Ok(()),
                        Err(e) => Err(GameError::LogError(format!("Error while writing in the '{}' log !", system_type), Some(e))),
                    },
                    None => Err(GameError::LogError(format!("The '{}' log could not be found !", system_type), None)),
                }
            },
            SystemType::Audio => {
                match self.files.get_mut(&SystemType::Audio) {
                    Some(file) => match file.write_all(message.as_bytes()) {
                        Ok(()) => Ok(()),
                        Err(e) => Err(GameError::LogError(format!("Error while writing in the '{}' log !", system_type), Some(e))),
                    },
                    None => Err(GameError::LogError(format!("The '{}' log could not be found !", system_type), None)),
                }
            },
        }
    }
}